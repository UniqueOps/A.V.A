#!/bin/bash

# Field headings
FIELDS=("Status" "Name" "Information")                                                                 # Declare Column Headings

# Field Arrays

# States
states[0]="${FIELDS[0]}"
states_size=${#FIELDS[0]}

STATE_UP="UP"
STATE_DOWN="DOWN"

# Name
name[0]="${FIELDS[1]}"
name_size=${#FIELDS[1]}

# Versions
versions[0]="${FIELDS[2]}"
versions_size=${#FIELDS[2]}

# Services

# Functions

function print_row() {                                                                                                  # Create Function To Print Table Rows
  states_temp=$(echo -e "${states[$1]}" | sed 's/\x1B\[[0-9;]*[JKmsu]//g')                                              # Detects Row Width (Padding)
  (( states_spacer = states_size - ${#states_temp} ))                                                                   # Detects Row Width (No Padding)
  format=" %-${states_size}s%b | %${name_size}s | %${versions_size}s\n"       # Declare Row Format
  printf "$format" "${states[$1]}" "" "${name[$1]}" "${versions[$1]}"                 # Add Prefix ("") To Fields With Colors
  if [ "$1" -eq 0 ]; then
    printf "%*s\n" "$width" | tr ' ' '=';                                                                               # Print Header Divider
  fi
}

# Field Accessors

# Setters

# These functions update the parallel arrays, and manage the size variable
# for the respective field.

# "Set" here is a bit of a misnomer since they are really adding a new element
# to the end of a list instead of setting the value of an element.
# Using the convention "add_field" might be more appropriate here.

function set_states() {
  if [ ${#1} -gt "$states_size" ]; then
    states_size=${#1}
  fi
  
  if [ "$1" == "$STATE_DOWN" ]; then
    states=("${states[@]}" "$R1$1$RS")
  elif [ "$1" == "$STATE_UP" ]; then
    states=("${states[@]}" "$G1$1$RS")
  fi
}

function set_name() {
  name=("${name[@]}" "$1")
  
  if [ ${#1} -gt "$name_size" ]; then
    name_size=${#1}
  fi
}

function set_versions() {
  versions=("${versions[@]}" "$1")
  
  if [ ${#1} -gt "$versions_size" ]; then
    versions_size=${#1}
  fi
}

# "Constructor"

function new_service() {
  # $1 = state
  # $2 = name
  # $3 = version

  set_states "$1"
  set_name "$2"
  set_versions "$3"
}

# Service Checks

function check_control_panel() {
  cpanel_state="$STATE_UP"
  cpanel_name="cPanel"
  cpanel_v="1.5"
  
  new_service "$cpanel_state" "$cpanel_name" "$cpanel_v"
}

function check_webserver() {
  apache_state="$STATE_UP"
  apache_name="Apache"
  apache_v="1.0"

  new_service "$apache_state" "$apache_name" "$apache_v"
}

function services_main() {

  # Row Order
  check_control_panel
  check_webserver
  
  # Title
  TITLE="DNS Check"
  title_size=${#TITLE}

  # Formatting
  width=$(( 
      2 \
      + ( 3 * ( ${#FIELDS[@]} - 1 ) ) \
      + states_size \
      + name_size \
      + versions_size ))

  # Print Table
  title_divider=$(( ( width - ( title_size + 2 ) ) / 2 )) 
  title_divider_2=$title_divider
  if [ $(( width % 2 )) -ne $(( title_size % 2 )) ]; then
    ((title_divider_2++))
  fi
  printf "$SC%*s$W1" $title_divider | tr ' ' '=';
  printf " %s " "$TITLE"
  printf "$SC%*s$RS\n" $title_divider_2 | tr ' ' '='

  # Print Rows
  for ((i=0; i<${#labels[*]}; i++)); do
    print_row $i
  done
}

services_main
