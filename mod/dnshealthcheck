#!/bin/bash
# Description: Domain DNS Health Checker
# Contributors: Casey McLaughlin

# Field headings
Table_Column_Headers=("Status" "Service" "Version")

# Field Arrays

# Status
status[0]="${Table_Column_Headers[0]}"
status_size=${#Table_Column_Headers[0]}

# Labels
labels[0]="${Table_Column_Headers[1]}"
labels_size=${#Table_Column_Headers[1]}

# Versions
versions[0]="${Table_Column_Headers[2]}"
versions_size=${#Table_Column_Headers[2]}

# Services

# Functions

function print_row() {                                                                                                  # Create Function To Print Table Rows
  status_temp=$(echo -e "${status[$1]}" | sed 's/\x1B\[[0-9;]*[JKmsu]//g')                                              # Detects Row Width (Padding)
  (( status_spacer = status_size - ${#status_temp} ))                                                                   # Detects Row Width (No Padding)
  format=" %${status_spacer}s%b | %-${labels_size}s | %${versions_size}s\n"                                             # Declare Row Format
  printf "$format" "" "${status[$1]}" "${labels[$1]}" "${versions[$1]}"                                                 # Add Prefix ("") To Table_Column_Headers With Colors
  if [ "$1" -eq 0 ]; then
    printf "%*s\n" "$width" | tr ' ' '=';                                                                               # Print Header Divider
  fi
}

# Field Accessors

# Setters

# These functions update the parallel arrays, and manage the size variable
# for the respective field.

# "Set" here is a bit of a misnomer since they are really adding a new element
# to the end of a list instead of setting the value of an element.
# Using the convention "add_field" might be more appropriate here.

function set_labels() {
  labels=("${labels[@]}" "$1")
  
  if [ ${#1} -gt "$labels_size" ]; then
    labels_size=${#1}
  fi
}

function set_versions() {
  versions=("${versions[@]}" "$1")
  
  if [ ${#1} -gt "$versions_size" ]; then
    versions_size=${#1}
  fi
}

function set_status() {
  if [ ${#1} -gt "$status_size" ]; then
    status_size=${#1}
  fi
  
  if [ "$1" == "DOWN" ]; then
    status=("${status[@]}" "$R1$1$RS")
  elif [ "$1" == "UP" ]; then
    status=("${status[@]}" "$G1$1$RS")
  fi
}

# "Constructor"

function new_service() {
  # $1 = status
  # $2 = label
  # $3 = version

  set_status "$1"
  set_labels "$2"
  set_versions "$3"
}

# Service Checks

function check_control_panel() {
  cpanel_status="UP"
  cpanel_label="cPanel"
  cpanel_v="1.5"

  new_service "$cpanel_status" "$cpanel_label" "$cpanel_v"
}

function check_webserver() {
  apache_status="DOWN"
  apache_label="Apache"
  apache_v="1.0"

  new_service "$apache_status" "$apache_label" "$apache_v"
}

function services_main() {

  # Row Order
  check_control_panel
  check_webserver
  
  # Title
  TITLE="Services Check"
  title_size=${#TITLE}

  # Formatting
  width=$(( 
      2 \
      + ( 3 * ( ${#Table_Column_Headers[@]} - 1 ) ) \
      + status_size \
      + labels_size \
      + versions_size ))

  # Print Table
  title_divider=$(( ( width - ( title_size + 2 ) ) / 2 )) 
  title_divider_2=$title_divider
  if [ $(( width % 2 )) -ne $(( title_size % 2 )) ]; then
    ((title_divider_2++))
  fi
  printf "$SC%*s$W1" $title_divider | tr ' ' '=';
  printf " %s " "$TITLE"
  printf "$SC%*s$RS\n" $title_divider_2 | tr ' ' '='

  # Print Rows
  for ((i=0; i<${#labels[*]}; i++)); do
    print_row $i
  done
}

services_main