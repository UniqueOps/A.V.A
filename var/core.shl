#!/bin/bash

################################################################################
# core.shl
# v1.6.1
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: A collection of functions intended to make writing new scripts, 
# or updating existing scripts easier.
#
# Globals:
# * CORE_FILENAME
# * TRITON_REPO_URL
# * TRITON_BLOB_URL
# * TRITON_BLOB_URL_DEV
# * TRITON_RAW_URL
# * TRITON_RAW_URL_DEV
# * CORE_BLOB_URL
# * CORE_RAW_URL
# * E_EARG
# * E_GETOPT
# * E_OPTPARSE
#
# Functions:
# * _core_test()
# * printerr()
# * include()
# * bytes_to_hr()
# * hr_to_bytes()
# * human_readable()
# * open_fd()
# * close_fd()
# * is_empty() 
# * is_not_empty()
# * is_file()
# * is_regfile()
# * is_dir()
# * is_symlink()
# * is_command()
# * is_builtin()
#
# Dependencies:
# None.
################################################################################

################################################################################
################################### Globals ####################################
################################################################################

readonly CORE_FILENAME="core.shl"
readonly CORE_VERSION="1.6.1"

# Codesilo:
readonly TRITON_REPO_URL="https://codesilo.dimenoc.com/grahaml/triton"
readonly TRITON_BLOB_URL="${TRITON_REPO_URL}/blob/master"
readonly TRITON_BLOB_URL_DEV="${TRITON_REPO_URL}/blob/dev"
readonly TRITON_RAW_URL="${TRITON_REPO_URL}/raw/master"
readonly TRITON_RAW_URL_DEV="${TRITON_REPO_URL}/raw/dev"

readonly CORE_BLOB_URL="${TRITON_BLOB_URL}/core/core.shl"
readonly CORE_RAW_URL="${TRITON_RAW_URL}/core/core.shl"

# Error messages
readonly E_EARG="Required argument is missing."
readonly E_GETOPT="'getopt' returned a non-zero exit status."
readonly E_OPTPARSE="There was an error parsing an option:"

################################################################################
################################## Functions ###################################
################################################################################

#*******************************************************************************
# _core_test() 
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Used to test for the presence of core.shl in the current shell.
#
# Returns: Returns 3 indicating that the core.shl has been sourced into the 
# current shell.
#
# Dependencies:
# None.
#*******************************************************************************

function _core_test() { return 3; }

#*******************************************************************************
# printerr()
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Redirects error messages to STDERR, and uses the FUNCNAME 
# environment variable  to automatically create more descriptive error messages.
#
# Returns: Prints the name of the calling function followed by an error message, 
# and the function call stack to STDERR.
#
# Options:
# -f FILENAME 
#   Adds a filename to the output of the error message.
#
# -l LINE_NUMBER
#   Adds a line number to the output of the error message.
#
# -r REPOSITORY_URL
#   Adds "Please report any issues here: REPOSITORY_URL" to the output of the
#   error message.
#
# -w 
#   Makes output less verbose. The function will not print the call stack when
#   this option is set.
#
# Arguments: An argument containing an error message should be passed. This 
# isn't technically required; the function will still output information with no
# arguments. There is no way to enforce a required argument without having this
# function generate its own error message (which may obfuscate an error in the
# calling function).
#
# Dependencies:
# None.
#
# Notes: The Bash built-in 'caller' can be used to implement a similar function 
# that includes line numbers but can only be used with regular files.
#*******************************************************************************

function printerr()
{
  local options
  if ! options=$(getopt -o f:,l:,r:,w -- "$@")
  then
    printerr -f "$CORE_FILENAME" -l "177" -r "$CORE_BLOB_URL" "$E_GETOPT"
    return 1
  fi

  eval set -- "$options"

  local file_name=""
  local line_num=""
  local repo_url=""
  local wflag='false'

  while true
  do
    case "$1" in
      -f )
        file_name="$2"
        shift
        ;;
      -l )
        line_num="$2"
        shift
        ;;
      -r )
        repo_url="$2"
        shift
        ;;
      -w )
        wflag='true'
        ;;
      -- )
        shift
        break
        ;;
      * )
        printerr -f "$CORE_FILENAME" -l "207" -r "$CORE_BLOB_URL" "$E_OPTPARSE $1"
        return 1
        ;;
    esac
    shift
  done

  local message="$1"

  # FUNCNAME is an array that contains the call stack.
  # The index '0' is the current function, 1 is the previous function, and so
  # on. The last element in the array should contain 'main' if called within a
  # script.
  printf "Error in %s" "${FUNCNAME[1]}" >&2

  if is_not_empty "$file_name" && is_not_empty "$line_num"
  then
    printf " (%s:%s)" "$file_name" "$line_num" >&2
  elif is_not_empty "$file_name"
  then
    printf " (file %s)" "$file_name" >&2
  elif is_not_empty "$line_num"
  then
    printf " (line %s)" "$line_num" >&2
  fi

  printf ": %s\n" "$message" >&2

  if ! $wflag
  then
    printf "\nCall stack (most recent call first):\n" >&2 # Print the call stack.

    for (( i = 1; i < ${#FUNCNAME[@]}; i++ )) # Prints the index and name of each function in the call stack.
    do
      printf "\t%s()\n" "${FUNCNAME[$i]}" >&2
    done
  fi

  if is_not_empty "$repo_url"
  then
    printf "\nPlease report any issues here: ${repo_url}\n" >&2
  fi

  return 0
}

#*******************************************************************************
# include()
# v1.4.3
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: This function is a helper function to simplify sourcing files. 
# Specifically, it allows scripts to source non-regular files in a way that is 
# backwards compatible with Bash v3.x.
#
# Arguments: 
# * The file path for a regular file or the URL for a hosted file.
# * There can be any number of arguments following the first argument. All
#   arguments after the first are passed as arguments the sourced file.
#
# Dependencies:
# * printerr()
# * is_empty()
# * is_file()
#*******************************************************************************

function include()
{
  if is_empty "$1" 
  then
    printerr -f "$CORE_FILENAME" -l "286" -r "$CORE_BLOB_URL" "$E_EARG" 
    return 1
  fi

  local source_url
  local file
  local error_msg

  if [ "$TRITON_BRANCH" == "dev" ]
  then
    source_url="${TRITON_RAW_URL_DEV}"
  else
    source_url="${TRITON_RAW_URL}"
  fi

  case "$1" in
    "cpanel" | "cpanel.shl" )
      if _cpanel_test >/dev/null 2>&1; [ $? != 3 ]
      then
        file="${source_url}/cpanel/cpanel.shl"
      else
        return 0
      fi
      ;;
    "colorize" | "colorize.shl" )
      if _colorize_test >/dev/null 2>&1; [ $? != 3 ]
      then
        file="${source_url}/colorize/colorize.shl"
      else
        return 0
      fi
      ;;
    "format" | "format.shl" )
      if _format_test >/dev/null 2>&1; [ $? != 3 ]
      then
        file="${source_url}/format/format.shl"
      else
        return 0
      fi
      ;;
    "human_readable" | "human_readable.shl" ) # Deprecated in v1.6.0 and its functions were moved to core.shl.
      return 0
      ;;
    "pattern" | "pattern.shl" )
      if _pattern_test >/dev/null 2>&1; [ $? != 3 ]
      then
        file="${source_url}/pattern/pattern.shl"
      else
        return 0
      fi
      ;;
    "system" | "system.shl" )
      if _system_test >/dev/null 2>&1; [ $? != 3 ]
      then
        file="${source_url}/system/system.shl"
      else
        return 0
      fi
      ;;
    *)
      file="$1"
      ;;
  esac

  shift
  
  error_msg="'source' returned a non-zero exit status.
Arguments: $file $@"

  if is_file "$file"
  then
    if ! source "$file" "$@"
    then
      printerr -f "$CORE_FILENAME" -l "342" -r "$CORE_BLOB_URL" "$error_msg"
      return 1
    fi
  else
    # The source built-in only supported regular files until some time in 
    # version 3. This is a workaround of that limitation.
    if ! source /proc/self/fd/0 <<<"$(< <(curl -ks "$file"))" "$@"
    then
      printerr -f "$CORE_FILENAME" -l "350" -r "$CORE_BLOB_URL" "$error_msg" 
      return 1
    fi
  fi

  return 0
}

#*******************************************************************************
# bytes_to_hr() 
# v1.1.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Converts bytes to a human readable file size.
#
# Returns: An integer representing the number of byte multiples followed 
# immediately by a single character representing the unit. If the input is not 
# a number, it returns "0B".
#
# Arguments: An integer representing bytes. Real numbers can be used but will be 
# rounded down to the nearest int.
#
# Dependencies:
# * is_empty()
#
# Known Issues: Arguments greater than or equal to 1024 YiB will cause an issue 
# but that should never occur under normal circumstances.
#*******************************************************************************

function bytes_to_hr()
{
  local size
  local units="BKMGTPEZY"

  size="$(grep -m1 -oE "[[:digit:]]+" <<<"$1" | head -1)"

  if is_empty "$size" || (( size == 0 ))
  then
    echo "0B"
    return 0
  fi

  awk '{ 
    base = int(log($1) / log(1024))
    factor = 1024 ^ base
    size = $1 / factor
    unit = substr($2,base+1,1)
    printf("%0.2f%s\n",size,unit)
  }' <<<"$size $units"

  return 0
}

#*******************************************************************************
# hr_to_bytes() 
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Converts a human readable file size to bytes.
#
# Returns: Outputs an integer representing the number of bytes. 
#
# Arguments: A file size; an integer or real number immediately followed by a
# character representing a unit. Accepted unit characters are B, K, M, G, T, P, 
# E, Z, and Y. Input is treated as bytes when no unit is provided.
#
# Dependencies:
# * printerr()
#*******************************************************************************

function hr_to_bytes()
{
  local size
  local unit
  local base
  local units="BKMGTPEZY"
  local pattern="(([[:digit:]]+)(\.[[:digit:]]+)?)(B|K|M|G|T|P|E|Z|Y)?"

  if is_empty "$1"
  then
    return 1
  fi

  if [[ $1 =~ $pattern ]]
  then
    size=${BASH_REMATCH[1]}
    unit=${BASH_REMATCH[4]}
  else
    printerr -w -f "$CORE_FILENAME" -r "$CORE_BLOB_URL" "'$1' is not a parseable file size." 
    return 1
  fi

  if [ "$unit" == 'B' ] || is_empty "$unit"
  then
    echo "${BASH_REMATCH[2]}"
    return 0
  fi

  base="${units%%$unit*}"
  base="${#base}"

  awk '{printf("%d\n",($1 * (1024 ^ $2)))}' <<<"$size $base"

  return
}

#*******************************************************************************
# human_readable() 
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Converts a file size to the expected human readable form. 
# Wrapper for hr_to_bytes() into bytes_to_hr().
#
# Returns: An integer representing the number of byte multiples followed 
# immediately by a single character representing the unit. If the input is not 
# a number, it returns "0B".
#
# Arguments: A file size; an integer or real number immediately followed by a
# character representing a unit. Accepted unit characters are B, K, M, G, T, P, 
# E, Z, and Y. Input is treated as bytes when no unit is provided.
#
# Dependencies:
# * bytes_to_hr()
# * hr_to_bytes()
#*******************************************************************************

function human_readable()
{
  local bytes
  bytes=$(hr_to_bytes "$1")
  bytes_to_hr "$bytes"
  return
}

#*******************************************************************************
# open_fd() 
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Opens a new file descriptor that can be used like a temporary 
# file and saves the name in a variable.
#
# Arguments: A string containing the *name* of a variable must be passed as an 
# argument because the function sets a variable with the name of argument to the 
# name of the created file descriptor.
#
# Dependencies:
# * is_empty()
# * printerr()
# * is_file()
#*******************************************************************************

function open_fd()
{
  if is_empty "$1"
  then
    printerr -f "$CORE_FILENAME" -r "$CORE_BLOB_URL" "$E_EARG"
    return 1
  fi

  local fn=$1
  local i=3 # File descriptors 0, 1, and 2 should be STDIN, STDOUT, and STDERR.

  while is_file "/dev/fd/${i}" && (( i < 1024 )) # Loop until we find a closed file descriptor.
  do
    (( i++))

    if (( i == 63 )) # File descriptor 63 is used by process substitution so we'll skip it.
    then
      i=64
    fi
  done

  if (( i == 1024 ))
  then
    printerr -f "$CORE_FILENAME" -r "$CORE_BLOB_URL" "Could not open a new file descriptor."
    return 1
  fi

  eval "exec ${i}<<< fd${i}" # Opens a file descriptor. The name after '<<<' doesn't seem to matter.
  >"/dev/fd/${i}"

  eval "${fn}=/dev/fd/${i}" # Sets the value of $fn to the name of the new file descriptor.

  return 0
}

#*******************************************************************************
# close_fd() 
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Closes a file descriptor.
#
# Arguments: The name of the file descriptor to close in the form '/dev/fd/INT'.
#
# Dependencies:
# * printerr()
#*******************************************************************************

function close_fd()
{
  local pattern="^/dev/fd/([[:digit:]]+)$"
  local i

  if [[ $1 =~ $pattern ]] # Verify that the argument is the expected form.
  then
    i=${BASH_REMATCH[1]} # Sets i to the number following '/dev/fd'.
  else
    printerr -f "$CORE_FILENAME" -r "$CORE_BLOB_URL" "'$1' is not a valid file descriptor name."
    return 1
  fi

  eval "exec ${i}<&-" # Close the file descriptor.
  return 0
}

#*******************************************************************************
# is_empty() 
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Tests if argument is empty.
#
# Arguments: Requires a variable to test. Returns false if no argument is 
# provided.
#
# Dependencies:
# None.
#*******************************************************************************

function is_empty() { [[ -z $1 ]]; }

#*******************************************************************************
# is_not_empty() 
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Tests if argument is not empty.
#
# Arguments: Requires a variable to test. Returns false if no argument is 
# provided.
#
# Dependencies:
# None.
#*******************************************************************************

function is_not_empty() { [[ -n $1 ]]; }

#*******************************************************************************
# is_file() 
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Tests if argument is a file that exists. This includes regular 
# files, directories, file descriptors, symbolic links etc.
#
# Arguments: Requires a variable to test. Returns false if no argument is 
# provided.
#
# Dependencies:
# None.
#*******************************************************************************

function is_file() { [[ -e $1 ]]; }

#*******************************************************************************
# is_regfile()
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Tests if argument is a regular file.
#
# Arguments: Requires a variable to test. Returns false if no argument is 
# provided.
#
# Dependencies:
# None.
#*******************************************************************************

function is_regfile() { [[ -f $1 ]]; }

#*******************************************************************************
# is_dir() 
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Tests if argument exists and is a directory.
#
# Arguments: Requires a variable to test. Returns false if no argument is 
# provided.
#
# Dependencies:
# None.
#*******************************************************************************

function is_dir() { [[ -d $1 ]]; }

#*******************************************************************************
# is_symlink() 
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Tests if argument is a symbolic link.
#
# Arguments: Requires a variable to test. Returns false if no argument is 
# provided.
#
# Dependencies:
# None.
#*******************************************************************************

function is_symlink() { [[ -L $1 ]]; }

#*******************************************************************************
# is_command() 
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description: Tests if argument is an external command.
#
# Arguments: Requires a variable to test. Returns false if no argument is 
# provided.
#
# Dependencies:
# None.
#*******************************************************************************

function is_command() { command -v "$1" >/dev/null 2>&1; }

#*******************************************************************************
# is_builtin() 
# v1.0.0
#
# Contributors:
# * Graham L. - Level 2 Support Technician - graham.l@hostdime.com
#
# Description:
# Tests if argument is a Bash builtin.
#
# Arguments: Requires a variable to test. Returns false if no argument is 
# provided.
#
# Dependencies:
# None.
#*******************************************************************************

function is_builtin() { [ "$(type -t "$1" 2>/dev/null)" == "builtin" ]; }

################################################################################
############################## Shell Preparation ###############################
################################################################################

readonly -f _core_test
readonly -f printerr 
readonly -f include 
readonly -f bytes_to_hr
readonly -f hr_to_bytes
readonly -f open_fd
readonly -f close_fd
readonly -f is_empty 
readonly -f is_not_empty
readonly -f is_file
readonly -f is_regfile
readonly -f is_dir
readonly -f is_symlink
readonly -f is_command
readonly -f is_builtin

# Creates aliases for commonly used builtins and commands to avoid unexpected
# behavior when using them.
unalias builtin 2>/dev/null
unset -f builtin 2>/dev/null

alias cd="builtin cd" 2>/dev/null
alias command="builtin command" 2>/dev/null
alias source="builtin source" 2>/dev/null

alias grep="command grep" 2>/dev/null
alias ls="command ls" 2>/dev/null
alias mkdir="command mkdir" 2>/dev/null
alias rm="command rm" 2>/dev/null

# Function aliases for convenience and compatibility reasons.
alias hr="human_readable"
alias error_die="printerr"
alias error_warning="printerr -w"